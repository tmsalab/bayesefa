// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// update_uniquenesses
void update_uniquenesses(const arma::mat& Y, arma::mat& F, arma::mat& Lambda, arma::vec& psis_inv);
RcppExport SEXP _bayesefa_update_uniquenesses(SEXP YSEXP, SEXP FSEXP, SEXP LambdaSEXP, SEXP psis_invSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type psis_inv(psis_invSEXP);
    update_uniquenesses(Y, F, Lambda, psis_inv);
    return R_NilValue;
END_RCPP
}
// EFA_Mode_Jumper
Rcpp::List EFA_Mode_Jumper(const arma::mat& Y, unsigned int M, double gamma, unsigned int burnin, unsigned int chain_length);
RcppExport SEXP _bayesefa_EFA_Mode_Jumper(SEXP YSEXP, SEXP MSEXP, SEXP gammaSEXP, SEXP burninSEXP, SEXP chain_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chain_length(chain_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(EFA_Mode_Jumper(Y, M, gamma, burnin, chain_length));
    return rcpp_result_gen;
END_RCPP
}
// rTruncNorm_bounds
double rTruncNorm_bounds(double mean, double sd, double upper, double bound);
RcppExport SEXP _bayesefa_rTruncNorm_bounds(SEXP meanSEXP, SEXP sdSEXP, SEXP upperSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(rTruncNorm_bounds(mean, sd, upper, bound));
    return rcpp_result_gen;
END_RCPP
}
// update_uniquenesses_mixed
void update_uniquenesses_mixed(const arma::mat& Y, const arma::vec& Ms, arma::mat& F, arma::mat& Lambda, arma::vec& psis_inv, const arma::vec& continuous_indicator);
RcppExport SEXP _bayesefa_update_uniquenesses_mixed(SEXP YSEXP, SEXP MsSEXP, SEXP FSEXP, SEXP LambdaSEXP, SEXP psis_invSEXP, SEXP continuous_indicatorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type psis_inv(psis_invSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type continuous_indicator(continuous_indicatorSEXP);
    update_uniquenesses_mixed(Y, Ms, F, Lambda, psis_inv, continuous_indicator);
    return R_NilValue;
END_RCPP
}
// update_WKappaZ_NA_mixed
Rcpp::List update_WKappaZ_NA_mixed(const arma::mat& Y, const arma::mat MISS, arma::mat& Z, const arma::mat& as, const arma::vec& bs, const arma::mat& theta, const arma::vec& Ms, const arma::mat& Kaps, const arma::vec& sdMH, const arma::vec& psis_inv, const arma::mat& bounds);
RcppExport SEXP _bayesefa_update_WKappaZ_NA_mixed(SEXP YSEXP, SEXP MISSSEXP, SEXP ZSEXP, SEXP asSEXP, SEXP bsSEXP, SEXP thetaSEXP, SEXP MsSEXP, SEXP KapsSEXP, SEXP sdMHSEXP, SEXP psis_invSEXP, SEXP boundsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type MISS(MISSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type as(asSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kaps(KapsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdMH(sdMHSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psis_inv(psis_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bounds(boundsSEXP);
    rcpp_result_gen = Rcpp::wrap(update_WKappaZ_NA_mixed(Y, MISS, Z, as, bs, theta, Ms, Kaps, sdMH, psis_inv, bounds));
    return rcpp_result_gen;
END_RCPP
}
// update_intercept_mixed
void update_intercept_mixed(arma::vec& intercept, arma::mat& Z, arma::mat& F, arma::mat& Lambda, arma::vec& psis_inv, double& intercept_var);
RcppExport SEXP _bayesefa_update_intercept_mixed(SEXP interceptSEXP, SEXP ZSEXP, SEXP FSEXP, SEXP LambdaSEXP, SEXP psis_invSEXP, SEXP intercept_varSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type psis_inv(psis_invSEXP);
    Rcpp::traits::input_parameter< double& >::type intercept_var(intercept_varSEXP);
    update_intercept_mixed(intercept, Z, F, Lambda, psis_inv, intercept_var);
    return R_NilValue;
END_RCPP
}
// IFA_Mode_Jumper_MixedResponses
Rcpp::List IFA_Mode_Jumper_MixedResponses(const arma::mat& Y, unsigned int M, double gamma, const arma::vec& Ms, const arma::vec& sdMH, const arma::mat& bounds, unsigned int burnin, unsigned int chain_length);
RcppExport SEXP _bayesefa_IFA_Mode_Jumper_MixedResponses(SEXP YSEXP, SEXP MSEXP, SEXP gammaSEXP, SEXP MsSEXP, SEXP sdMHSEXP, SEXP boundsSEXP, SEXP burninSEXP, SEXP chain_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdMH(sdMHSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chain_length(chain_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(IFA_Mode_Jumper_MixedResponses(Y, M, gamma, Ms, sdMH, bounds, burnin, chain_length));
    return rcpp_result_gen;
END_RCPP
}
// sampleY_given_Z
double sampleY_given_Z(const arma::vec& threshold, const double& Msj, const double& Z, const arma::vec& bounds);
RcppExport SEXP _bayesefa_sampleY_given_Z(SEXP thresholdSEXP, SEXP MsjSEXP, SEXP ZSEXP, SEXP boundsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const double& >::type Msj(MsjSEXP);
    Rcpp::traits::input_parameter< const double& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bounds(boundsSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleY_given_Z(threshold, Msj, Z, bounds));
    return rcpp_result_gen;
END_RCPP
}
// mixedresponse_posterior_prediction
arma::cube mixedresponse_posterior_prediction(const Rcpp::List& OUTPUT, const arma::mat& Y, const arma::vec& Ms, const arma::vec& variable_predict_flag, const arma::mat& bounds, unsigned n_mcmc_iterations);
RcppExport SEXP _bayesefa_mixedresponse_posterior_prediction(SEXP OUTPUTSEXP, SEXP YSEXP, SEXP MsSEXP, SEXP variable_predict_flagSEXP, SEXP boundsSEXP, SEXP n_mcmc_iterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type OUTPUT(OUTPUTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type variable_predict_flag(variable_predict_flagSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n_mcmc_iterations(n_mcmc_iterationsSEXP);
    rcpp_result_gen = Rcpp::wrap(mixedresponse_posterior_prediction(OUTPUT, Y, Ms, variable_predict_flag, bounds, n_mcmc_iterations));
    return rcpp_result_gen;
END_RCPP
}
// rTruncNorm_lb
double rTruncNorm_lb(double mean, double sd, double b_lb);
RcppExport SEXP _bayesefa_rTruncNorm_lb(SEXP meanSEXP, SEXP sdSEXP, SEXP b_lbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type b_lb(b_lbSEXP);
    rcpp_result_gen = Rcpp::wrap(rTruncNorm_lb(mean, sd, b_lb));
    return rcpp_result_gen;
END_RCPP
}
// update_WKappaZ_NA
Rcpp::List update_WKappaZ_NA(const arma::mat& Y, const arma::mat MISS, arma::mat& Z, const arma::mat& as, const arma::vec& bs, const arma::mat& theta, const arma::vec& Ms, const arma::mat& Kaps, const arma::vec& sdMH);
RcppExport SEXP _bayesefa_update_WKappaZ_NA(SEXP YSEXP, SEXP MISSSEXP, SEXP ZSEXP, SEXP asSEXP, SEXP bsSEXP, SEXP thetaSEXP, SEXP MsSEXP, SEXP KapsSEXP, SEXP sdMHSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type MISS(MISSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type as(asSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kaps(KapsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdMH(sdMHSEXP);
    rcpp_result_gen = Rcpp::wrap(update_WKappaZ_NA(Y, MISS, Z, as, bs, theta, Ms, Kaps, sdMH));
    return rcpp_result_gen;
END_RCPP
}
// update_intercept
void update_intercept(arma::vec& intercept, arma::mat& Z, arma::mat& F, arma::mat& Lambda, arma::vec& psis_inv, double& intercept_var);
RcppExport SEXP _bayesefa_update_intercept(SEXP interceptSEXP, SEXP ZSEXP, SEXP FSEXP, SEXP LambdaSEXP, SEXP psis_invSEXP, SEXP intercept_varSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type psis_inv(psis_invSEXP);
    Rcpp::traits::input_parameter< double& >::type intercept_var(intercept_varSEXP);
    update_intercept(intercept, Z, F, Lambda, psis_inv, intercept_var);
    return R_NilValue;
END_RCPP
}
// min2LL_ono
double min2LL_ono(unsigned int N, unsigned int J, const arma::mat& Y, const arma::mat& MISS, const arma::mat& as, const arma::vec& bs, const arma::mat& theta, const arma::vec& Ms, const arma::mat& Kaps);
RcppExport SEXP _bayesefa_min2LL_ono(SEXP NSEXP, SEXP JSEXP, SEXP YSEXP, SEXP MISSSEXP, SEXP asSEXP, SEXP bsSEXP, SEXP thetaSEXP, SEXP MsSEXP, SEXP KapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type J(JSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MISS(MISSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type as(asSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kaps(KapsSEXP);
    rcpp_result_gen = Rcpp::wrap(min2LL_ono(N, J, Y, MISS, as, bs, theta, Ms, Kaps));
    return rcpp_result_gen;
END_RCPP
}
// IFA_Mode_Jumper
Rcpp::List IFA_Mode_Jumper(const arma::mat& Y, unsigned int M, double gamma, const arma::vec& Ms, const arma::vec& sdMH, unsigned int burnin, unsigned int chain_length);
RcppExport SEXP _bayesefa_IFA_Mode_Jumper(SEXP YSEXP, SEXP MSEXP, SEXP gammaSEXP, SEXP MsSEXP, SEXP sdMHSEXP, SEXP burninSEXP, SEXP chain_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdMH(sdMHSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type chain_length(chain_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(IFA_Mode_Jumper(Y, M, gamma, Ms, sdMH, burnin, chain_length));
    return rcpp_result_gen;
END_RCPP
}
// proposal2
Rcpp::List proposal2(arma::uvec& new_r_idx, arma::mat& lambda, arma::mat& factors);
RcppExport SEXP _bayesefa_proposal2(SEXP new_r_idxSEXP, SEXP lambdaSEXP, SEXP factorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type new_r_idx(new_r_idxSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type factors(factorsSEXP);
    rcpp_result_gen = Rcpp::wrap(proposal2(new_r_idx, lambda, factors));
    return rcpp_result_gen;
END_RCPP
}
// mode_jump
Rcpp::List mode_jump(const arma::mat& X, arma::mat& lambda_mean, arma::mat& f_mean, arma::mat& invClam, const arma::vec sigma, arma::uvec r_idx, double my_gamma);
RcppExport SEXP _bayesefa_mode_jump(SEXP XSEXP, SEXP lambda_meanSEXP, SEXP f_meanSEXP, SEXP invClamSEXP, SEXP sigmaSEXP, SEXP r_idxSEXP, SEXP my_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type lambda_mean(lambda_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type f_mean(f_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type invClam(invClamSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type r_idx(r_idxSEXP);
    Rcpp::traits::input_parameter< double >::type my_gamma(my_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(mode_jump(X, lambda_mean, f_mean, invClam, sigma, r_idx, my_gamma));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
arma::mat rmvnorm(unsigned int n, const arma::vec& mu, const arma::mat& S);
RcppExport SEXP _bayesefa_rmvnorm(SEXP nSEXP, SEXP muSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(n, mu, S));
    return rcpp_result_gen;
END_RCPP
}
// sim_gamma_type
double sim_gamma_type(double x, double alph, double g, double d);
RcppExport SEXP _bayesefa_sim_gamma_type(SEXP xSEXP, SEXP alphSEXP, SEXP gSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_gamma_type(x, alph, g, d));
    return rcpp_result_gen;
END_RCPP
}
// update_F_matrix
void update_F_matrix(const arma::mat& Y, const arma::mat& I_K, arma::mat& F, arma::mat& Lambda, arma::vec& psis_inv);
RcppExport SEXP _bayesefa_update_F_matrix(SEXP YSEXP, SEXP I_KSEXP, SEXP FSEXP, SEXP LambdaSEXP, SEXP psis_invSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type I_K(I_KSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type psis_inv(psis_invSEXP);
    update_F_matrix(Y, I_K, F, Lambda, psis_inv);
    return R_NilValue;
END_RCPP
}
// update_invClam
void update_invClam(const arma::mat& Lambda, arma::mat& invClam);
RcppExport SEXP _bayesefa_update_invClam(SEXP LambdaSEXP, SEXP invClamSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type invClam(invClamSEXP);
    update_invClam(Lambda, invClam);
    return R_NilValue;
END_RCPP
}
// my_setdiff
arma::uvec my_setdiff(arma::uvec& x, const arma::uvec& y);
RcppExport SEXP _bayesefa_my_setdiff(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(my_setdiff(x, y));
    return rcpp_result_gen;
END_RCPP
}
// update_Lambda_loadings_hard_zero
void update_Lambda_loadings_hard_zero(const arma::mat& Y, arma::uvec& r_idx, arma::mat& F, arma::mat& Lambda, arma::vec& psis_inv, const arma::mat invClam, double my_gamma);
RcppExport SEXP _bayesefa_update_Lambda_loadings_hard_zero(SEXP YSEXP, SEXP r_idxSEXP, SEXP FSEXP, SEXP LambdaSEXP, SEXP psis_invSEXP, SEXP invClamSEXP, SEXP my_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type r_idx(r_idxSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type psis_inv(psis_invSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type invClam(invClamSEXP);
    Rcpp::traits::input_parameter< double >::type my_gamma(my_gammaSEXP);
    update_Lambda_loadings_hard_zero(Y, r_idx, F, Lambda, psis_inv, invClam, my_gamma);
    return R_NilValue;
END_RCPP
}
// kappa_initialize
arma::mat kappa_initialize(const arma::vec& Ms);
RcppExport SEXP _bayesefa_kappa_initialize(SEXP MsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type Ms(MsSEXP);
    rcpp_result_gen = Rcpp::wrap(kappa_initialize(Ms));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bayesefa_update_uniquenesses", (DL_FUNC) &_bayesefa_update_uniquenesses, 4},
    {"_bayesefa_EFA_Mode_Jumper", (DL_FUNC) &_bayesefa_EFA_Mode_Jumper, 5},
    {"_bayesefa_rTruncNorm_bounds", (DL_FUNC) &_bayesefa_rTruncNorm_bounds, 4},
    {"_bayesefa_update_uniquenesses_mixed", (DL_FUNC) &_bayesefa_update_uniquenesses_mixed, 6},
    {"_bayesefa_update_WKappaZ_NA_mixed", (DL_FUNC) &_bayesefa_update_WKappaZ_NA_mixed, 11},
    {"_bayesefa_update_intercept_mixed", (DL_FUNC) &_bayesefa_update_intercept_mixed, 6},
    {"_bayesefa_IFA_Mode_Jumper_MixedResponses", (DL_FUNC) &_bayesefa_IFA_Mode_Jumper_MixedResponses, 8},
    {"_bayesefa_sampleY_given_Z", (DL_FUNC) &_bayesefa_sampleY_given_Z, 4},
    {"_bayesefa_mixedresponse_posterior_prediction", (DL_FUNC) &_bayesefa_mixedresponse_posterior_prediction, 6},
    {"_bayesefa_rTruncNorm_lb", (DL_FUNC) &_bayesefa_rTruncNorm_lb, 3},
    {"_bayesefa_update_WKappaZ_NA", (DL_FUNC) &_bayesefa_update_WKappaZ_NA, 9},
    {"_bayesefa_update_intercept", (DL_FUNC) &_bayesefa_update_intercept, 6},
    {"_bayesefa_min2LL_ono", (DL_FUNC) &_bayesefa_min2LL_ono, 9},
    {"_bayesefa_IFA_Mode_Jumper", (DL_FUNC) &_bayesefa_IFA_Mode_Jumper, 7},
    {"_bayesefa_proposal2", (DL_FUNC) &_bayesefa_proposal2, 3},
    {"_bayesefa_mode_jump", (DL_FUNC) &_bayesefa_mode_jump, 7},
    {"_bayesefa_rmvnorm", (DL_FUNC) &_bayesefa_rmvnorm, 3},
    {"_bayesefa_sim_gamma_type", (DL_FUNC) &_bayesefa_sim_gamma_type, 4},
    {"_bayesefa_update_F_matrix", (DL_FUNC) &_bayesefa_update_F_matrix, 5},
    {"_bayesefa_update_invClam", (DL_FUNC) &_bayesefa_update_invClam, 2},
    {"_bayesefa_my_setdiff", (DL_FUNC) &_bayesefa_my_setdiff, 2},
    {"_bayesefa_update_Lambda_loadings_hard_zero", (DL_FUNC) &_bayesefa_update_Lambda_loadings_hard_zero, 7},
    {"_bayesefa_kappa_initialize", (DL_FUNC) &_bayesefa_kappa_initialize, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bayesefa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
